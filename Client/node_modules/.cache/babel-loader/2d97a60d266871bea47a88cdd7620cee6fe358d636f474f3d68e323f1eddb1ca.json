{"ast":null,"code":"const validateUser = userData => {\n  const errors = {};\n  const validateGmailRegex = /^[a-zA-Z0-9]+([._][a-zA-Z0-9]+)*@gmail.com$/; // No se puede hacer un test de un string. Por eso no funcionaba.\n\n  /* GMAIL */\n  if (!userData.gmail) {\n    errors.gmail = 'Debe ingresar un correo electrónico';\n  }\n  if (!validateGmailRegex.test(userData.gmail)) {\n    errors.gmail = 'Debe ingresar un gmail';\n  }\n  if (userData.gmail.length > 35) {\n    errors.gmail = 'No debe superar 35 caracteres';\n  }\n\n  /* PASSWORD */\n  if (!userData.password) {\n    errors.password = 'Ingrese password';\n  }\n  if (!/.*\\d+.*/.test(userData.password)) {\n    errors.password = 'Debe tener al menos un (1) número';\n  }\n  if (userData.password.length < 6 || userData.password.length > 10) {\n    errors.password = 'Debe tener entre 6 y 10 caracteres';\n  }\n  return errors;\n};\nexport default validateUser;\n\n// const validatePassword = (password) => {\n//     const errors = {};\n//     if (!password) { errors.password = 'Ingrese password' }\n//     else if (!/\\d/.test(password)) { errors.password = 'Debe tener al menos un (1) número' } // Expresión regular: \"/\\d/\" verifica si hay un dígito numérico.\n//     else if (password.length < 6 && password.length > 10) { errors.password = 'Debe tener entre 6 y 10 caracteres' }\n// }","map":{"version":3,"names":["validateUser","userData","errors","validateGmailRegex","gmail","test","length","password"],"sources":["D:/FEDERICO/Escritorio/rick_and_morty/Client/src/commons/functions/validateUser.jsx"],"sourcesContent":["const validateUser = (userData) => {\r\n    const errors = {};\r\n    const validateGmailRegex = /^[a-zA-Z0-9]+([._][a-zA-Z0-9]+)*@gmail.com$/ // No se puede hacer un test de un string. Por eso no funcionaba.\r\n\r\n    /* GMAIL */\r\n    if (!userData.gmail) { errors.gmail = 'Debe ingresar un correo electrónico' }\r\n    if (!validateGmailRegex.test(userData.gmail)) { errors.gmail = 'Debe ingresar un gmail' }\r\n    if (userData.gmail.length > 35) { errors.gmail = 'No debe superar 35 caracteres' }\r\n\r\n    /* PASSWORD */\r\n    if (!userData.password) { errors.password = 'Ingrese password' }\r\n    if (!/.*\\d+.*/.test(userData.password)) { errors.password = 'Debe tener al menos un (1) número' }\r\n    if (userData.password.length < 6 || userData.password.length > 10) { errors.password = 'Debe tener entre 6 y 10 caracteres' }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default validateUser;\r\n\r\n\r\n// const validatePassword = (password) => {\r\n//     const errors = {};\r\n//     if (!password) { errors.password = 'Ingrese password' }\r\n//     else if (!/\\d/.test(password)) { errors.password = 'Debe tener al menos un (1) número' } // Expresión regular: \"/\\d/\" verifica si hay un dígito numérico.\r\n//     else if (password.length < 6 && password.length > 10) { errors.password = 'Debe tener entre 6 y 10 caracteres' }\r\n// }\r\n\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,QAAQ,IAAK;EAC/B,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,kBAAkB,GAAG,6CAA6C,EAAC;;EAEzE;EACA,IAAI,CAACF,QAAQ,CAACG,KAAK,EAAE;IAAEF,MAAM,CAACE,KAAK,GAAG,qCAAqC;EAAC;EAC5E,IAAI,CAACD,kBAAkB,CAACE,IAAI,CAACJ,QAAQ,CAACG,KAAK,CAAC,EAAE;IAAEF,MAAM,CAACE,KAAK,GAAG,wBAAwB;EAAC;EACxF,IAAIH,QAAQ,CAACG,KAAK,CAACE,MAAM,GAAG,EAAE,EAAE;IAAEJ,MAAM,CAACE,KAAK,GAAG,+BAA+B;EAAC;;EAEjF;EACA,IAAI,CAACH,QAAQ,CAACM,QAAQ,EAAE;IAAEL,MAAM,CAACK,QAAQ,GAAG,kBAAkB;EAAC;EAC/D,IAAI,CAAC,SAAS,CAACF,IAAI,CAACJ,QAAQ,CAACM,QAAQ,CAAC,EAAE;IAAEL,MAAM,CAACK,QAAQ,GAAG,mCAAmC;EAAC;EAChG,IAAIN,QAAQ,CAACM,QAAQ,CAACD,MAAM,GAAG,CAAC,IAAIL,QAAQ,CAACM,QAAQ,CAACD,MAAM,GAAG,EAAE,EAAE;IAAEJ,MAAM,CAACK,QAAQ,GAAG,oCAAoC;EAAC;EAE5H,OAAOL,MAAM;AACjB,CAAC;AAED,eAAeF,YAAY;;AAG3B;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}